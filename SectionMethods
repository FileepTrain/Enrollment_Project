import decimal

from Department import Department
from Course import Course
from Utilities import Utilities
from ConstraintUtilities import select_general, unique_general, prompt_for_date
from Menu import Menu
from Option import Option
from Section import Section


def select_course() -> Course:
    return select_general(Course)

def select_section() -> Section:
    return select_general(Section)

# add a section to a course
def add_section():
    success: bool = False
    new_section: Section
    course: Department
    while not success:
        course = select_course() # select a course 
        section_number = int(input("Enter Section Number --> "))
        semester = input("Enter Semester (Fall, Spring, Summer I, Summer II, Summer III, Winter) --> ")
        section_year = int(input("Enter Year --> "))
        building = input("Enter Building (ANAC, CDC, DC, ECS, EN2, EN3, EN4, EN5, ET, HSCI, NUR, VEC) --> ")
        room = int(input("Enter Room Number (> 1 and < 1000) --> "))
        schedule = input("Enter Schedule (MW, TuTh, MWF, F, S) --> ")
        start_time = input("Enter Section Start Time (HH:MM, 24-hour format, >= 08:00 and <= 19:30) --> ")
        instructor = input("Enter Instructor Name --> ")
        # create a new section
        new_section = Section(course, section_number, semester, section_year, building, room, schedule, start_time, instructor)
        # check unique
        violated_constraints = unique_general(new_section)
        if len(violated_constraints) > 0:
            for violated_constraint in violated_constraints:
                print('Your input values violated constraint: ', violated_constraint)
            print('Try again')
        else:
            try:
                new_section.save()  # save new section
                success = True
            except Exception as e:
                print('Exception trying to add the new course:')
                print(Utilities.print_exception(e))
# delete a section from a course
def delete_section():
    section = select_section()
    # check for enrollments
    if section.enrollments:
        print("This section cannot be deleted because it has students enrolled in it.")
        return
    
    try:
        section.delete()
        print(f'Section {section.sectionNumber} has been successfully deleted.')
    except Exception as e:
        print('Errors deleting section:')
        print(Utilities.print_exception(e))
    
# list all sections of a course
def list_section():
    course = select_course()
    all_sections = Section.objects(course=course) # get all section within that course
    for section in all_sections:
        print(section)
    

